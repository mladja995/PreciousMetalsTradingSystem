// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PreciousMetalsTradingSystem.Infrastructure.Database;

#nullable disable

namespace PreciousMetalsTradingSystem.Infrastructure.Migrations
{
    [DbContext(typeof(TradingSystemDbContext))]
    [Migration("20250425072412_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.FinancialAdjustment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("AdjustmentDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SideType")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FinancialAdjustments", (string)null);
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.FinancialTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BalanceType")
                        .HasColumnType("int");

                    b.Property<Guid?>("FinancialAdjustmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SideType")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TradeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FinancialAdjustmentId");

                    b.HasIndex("TradeId");

                    b.ToTable("FinancialTransactions", (string)null);
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.HedgingAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("HedgingAccounts", (string)null);
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.HedgingItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("HedgingAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("HedgingItemDate")
                        .HasColumnType("date");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SideType")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HedgingAccountId");

                    b.ToTable("HedgingItems", (string)null);
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.LocationHedgingAccountConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<Guid>("HedgingAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HedgingAccountId");

                    b.ToTable("LocationHedgingAccountConfigurations", (string)null);
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("MetalType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("WeightInOz")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.ProductLocationConfiguration", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<decimal>("BuyPremium")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsAvailableForBuy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailableForSell")
                        .HasColumnType("bit");

                    b.Property<int>("PremiumUnitType")
                        .HasColumnType("int");

                    b.Property<decimal>("SellPremium")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "LocationType");

                    b.ToTable("ProductLocationConfigurations", (string)null);
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.ProductLocationPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<int>("PositionUnits")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityUnits")
                        .HasColumnType("int");

                    b.Property<int>("SideType")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TradeId");

                    b.ToTable("ProductLocationPositions", (string)null);
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.SpotDeferredTrade", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HedgingAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsManual")
                        .HasColumnType("bit");

                    b.Property<int>("Side")
                        .HasColumnType("int");

                    b.Property<DateOnly>("SpotDeferredTradeDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("TradeConfirmationReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("HedgingAccountId");

                    b.ToTable("SpotDeferredTrades", (string)null);
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.SpotDeferredTradeItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Metal")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerOz")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QuantityOz")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("SpotDeferredTradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("SpotDeferredTradeId");

                    b.ToTable("SpotDeferredTradeItems", (string)null);
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.Trade", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CancelledOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ConfirmedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("FinancialSettleOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FinancialSettledOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFinancialSettled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPositionSettled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OffsetTradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PositionSettledOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Side")
                        .HasColumnType("int");

                    b.Property<Guid?>("SpotDeferredTradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("TradeDate")
                        .HasColumnType("date");

                    b.Property<string>("TradeNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("TradeQuoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OffsetTradeId")
                        .IsUnique()
                        .HasFilter("[OffsetTradeId] IS NOT NULL");

                    b.HasIndex("SpotDeferredTradeId");

                    b.HasIndex("TradeQuoteId")
                        .IsUnique()
                        .HasFilter("[TradeQuoteId] IS NOT NULL");

                    b.ToTable("Trades", (string)null);
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.TradeItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("EffectivePricePerOz")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PremiumPerOz")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityUnits")
                        .HasColumnType("int");

                    b.Property<decimal>("SpotPricePerOz")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalEffectivePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalRevenue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TradePricePerOz")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("TradeQuoteItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TradeId");

                    b.HasIndex("TradeQuoteItemId")
                        .IsUnique()
                        .HasFilter("[TradeQuoteItemId] IS NOT NULL");

                    b.ToTable("TradeItems", (string)null);
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.TradeQuote", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DealerQuoteId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssuedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Side")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TradeQuotes", (string)null);
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.TradeQuoteItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("EffectivePricePerOz")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PremiumPricePerOz")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityUnits")
                        .HasColumnType("int");

                    b.Property<decimal>("SpotPricePerOz")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TradeQuoteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TradeQuoteId");

                    b.ToTable("TradeQuoteItems", (string)null);
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.FinancialTransaction", b =>
                {
                    b.HasOne("PreciousMetalsTradingSystem.Domain.Entities.FinancialAdjustment", "FinancialAdjustment")
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("FinancialAdjustmentId");

                    b.HasOne("PreciousMetalsTradingSystem.Domain.Entities.Trade", "Trade")
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("TradeId");

                    b.Navigation("FinancialAdjustment");

                    b.Navigation("Trade");
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.HedgingItem", b =>
                {
                    b.HasOne("PreciousMetalsTradingSystem.Domain.Entities.HedgingAccount", null)
                        .WithMany("HedgingItems")
                        .HasForeignKey("HedgingAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.LocationHedgingAccountConfiguration", b =>
                {
                    b.HasOne("PreciousMetalsTradingSystem.Domain.Entities.HedgingAccount", "HedgingAccount")
                        .WithMany("LocationHedgingAccountConfigurations")
                        .HasForeignKey("HedgingAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HedgingAccount");
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.ProductLocationConfiguration", b =>
                {
                    b.HasOne("PreciousMetalsTradingSystem.Domain.Entities.Product", null)
                        .WithMany("LocationConfigurations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.ProductLocationPosition", b =>
                {
                    b.HasOne("PreciousMetalsTradingSystem.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PreciousMetalsTradingSystem.Domain.Entities.Trade", "Trade")
                        .WithMany()
                        .HasForeignKey("TradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Trade");
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.SpotDeferredTrade", b =>
                {
                    b.HasOne("PreciousMetalsTradingSystem.Domain.Entities.HedgingAccount", null)
                        .WithMany("SpotDeferredTrades")
                        .HasForeignKey("HedgingAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.SpotDeferredTradeItem", b =>
                {
                    b.HasOne("PreciousMetalsTradingSystem.Domain.Entities.SpotDeferredTrade", "SpotDeferredTrade")
                        .WithMany("Items")
                        .HasForeignKey("SpotDeferredTradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpotDeferredTrade");
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.Trade", b =>
                {
                    b.HasOne("PreciousMetalsTradingSystem.Domain.Entities.Trade", "OffsetTrade")
                        .WithOne()
                        .HasForeignKey("PreciousMetalsTradingSystem.Domain.Entities.Trade", "OffsetTradeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PreciousMetalsTradingSystem.Domain.Entities.SpotDeferredTrade", null)
                        .WithMany("Trades")
                        .HasForeignKey("SpotDeferredTradeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PreciousMetalsTradingSystem.Domain.Entities.TradeQuote", null)
                        .WithOne()
                        .HasForeignKey("PreciousMetalsTradingSystem.Domain.Entities.Trade", "TradeQuoteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OffsetTrade");
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.TradeItem", b =>
                {
                    b.HasOne("PreciousMetalsTradingSystem.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PreciousMetalsTradingSystem.Domain.Entities.Trade", "Trade")
                        .WithMany("Items")
                        .HasForeignKey("TradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PreciousMetalsTradingSystem.Domain.Entities.TradeQuoteItem", null)
                        .WithOne()
                        .HasForeignKey("PreciousMetalsTradingSystem.Domain.Entities.TradeItem", "TradeQuoteItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");

                    b.Navigation("Trade");
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.TradeQuoteItem", b =>
                {
                    b.HasOne("PreciousMetalsTradingSystem.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PreciousMetalsTradingSystem.Domain.Entities.TradeQuote", "TradeQuote")
                        .WithMany("Items")
                        .HasForeignKey("TradeQuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("TradeQuote");
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.FinancialAdjustment", b =>
                {
                    b.Navigation("FinancialTransactions");
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.HedgingAccount", b =>
                {
                    b.Navigation("HedgingItems");

                    b.Navigation("LocationHedgingAccountConfigurations");

                    b.Navigation("SpotDeferredTrades");
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.Product", b =>
                {
                    b.Navigation("LocationConfigurations");
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.SpotDeferredTrade", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Trades");
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.Trade", b =>
                {
                    b.Navigation("FinancialTransactions");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("PreciousMetalsTradingSystem.Domain.Entities.TradeQuote", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
